{"version":3,"sources":["atoms/favorites.ts","atoms/persistence.ts","components/Indicator.tsx","configs/config.ts","hooks/unsplash.ts","hooks/fetch.ts","pages/Search/SearchInput.tsx","configs/validator.ts","pages/Search/FavoriteAddForm.tsx","pages/Search/FavoriteChoiceForm.tsx","pages/Search/FavoriteConfirmModal.tsx","hooks/favorite.ts","components/UserInfo.tsx","utils.ts","pages/Search/SearchResult.tsx","hooks/modal.ts","pages/Search/index.tsx","hooks/search.ts","components/LazyImage.tsx","components/FavoriteItem.tsx","pages/Favorites/FavoriteEditInfoForm.tsx","pages/Favorites/FavoriteCollection.tsx","hooks/toggle.ts","pages/Favorites/index.tsx","Routes.tsx","pages/MainLayout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["favoritesState","atom","key","default","initializeState","snapshot","value","localStorage","getItem","set","JSON","parse","PersistenceObserver","useRecoilTransactionObserver_UNSTABLE","loadable","getLoadable","state","setItem","stringify","contents","Indicator","React","memo","props","className","style","width","size","height","src","process","alt","unsplash","useUnsplash","useState","loading","setLoading","error","setError","_fetch","useCallback","url","method","a","data","header","abortController","AbortController","timeout","setTimeout","abort","undefined","fetch","headers","mode","signal","body","response","ok","err","Error","statusText","Promise","reject","json","clearTimeout","makeUrlParameter","Object","keys","map","k","toString","join","get","post","useFetch","search","words","query","encodeURIComponent","orientation","catch","e","res","SearchInput","data-testid","placeholder","word","onChange","changeInput","target","favoriteRule","required","minLength","message","maxLength","FavoriteAddForm","useForm","register","handleSubmit","errors","onSubmit","htmlFor","type","name","ref","title","role","description","FavoriteChoiceForm","favorites","favorite","idx","id","FavoriteConfirmModal","overlayClassName","isOpen","onRequestClose","closeModal","item","find","f","favoriteId","addFavorite","photos","useFavorite","useRecoilState","setFavorites","photo","clonedeep","findIndex","uuidv4","push","updateFavorite","UserInfo","href","user","links","html","rel","profile_image","small","username","download","elm","document","createElement","file","Blob","URL","createObjectURL","click","SearchResult","setIsOpen","openModal","useModal","onDownload","urls","regular","onAddFavorite","backgroundImage","onClick","initialWord","setWord","searchResult","useObservable","_","word$","pipe","debounceTime","distinctUntilChanged","filter","length","switchMap","result","useSearch","LazyImage","imageRef","useRef","imageLoaded","setImageLoaded","startLoading","entries","observer","forEach","entry","isIntersecting","intersectionRatio","unobserve","downloadingImage","Image","onload","current","setAttribute","useEffect","IntersectionObserver","rootMargin","observe","FavoriteItem","thumb","FavoriteEditInfoForm","defaultValue","FavoriteCollection","initialize","toggle","useToggle","editable","path","component","Search","Favorites","exact","from","to","render","MainLayout","children","App","Modal","setAppElement","basename","Routes","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console"],"mappings":"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","file":"static/js/main.f372d9f0.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const favoritesState = atom<App.FavoriteCollection>({\n    key: 'favoritesState', // unique ID (with respect to other atoms/selectors)\n    default: [], // default value (aka initial value)\n});","import { MutableSnapshot, useRecoilTransactionObserver_UNSTABLE } from \"recoil\";\nimport { favoritesState } from \"./favorites\";\n\n\nexport const initializeState = (snapshot: MutableSnapshot) => {\n    const value = localStorage.getItem(favoritesState.key);\n    if (value) {\n        snapshot.set(favoritesState, JSON.parse(value).value);\n    }\n}\n\nexport const PersistenceObserver = () => {\n    useRecoilTransactionObserver_UNSTABLE(({ snapshot }) => {\n        const loadable = snapshot.getLoadable(favoritesState);\n        if (loadable.state === 'hasValue') {\n            localStorage.setItem(\n                favoritesState.key,\n                JSON.stringify({ value: loadable.contents }),\n            );\n        }\n    });\n    return null;\n}","import React from \"react\";\n\ntype Props = {\n    size: number;\n}\n\nexport const Indicator: React.FC<Props> = React.memo((props: Props) => (\n    <div className=\"indicator\" style={{ width: props.size, height: props.size }}>\n        <img src={`${process.env.PUBLIC_URL}/img/oval.svg`} alt=\"indicator\" />\n    </div>\n));","export const unsplash = {\n    domain: \"https://api.unsplash.com/\",\n    apiKey: process.env.REACT_APP_UNSPLASH_API_KEY,\n};","import { useFetch } from \"./fetch\";\nimport { unsplash } from \"app/src/configs/config\";\n\nexport const useUnsplash = () => {\n    const { loading, error, get } = useFetch();\n\n    const search = async (words: string, page: number = 1): Promise<Unsplash.Photo | null> => {\n        const res = await get<Unsplash.SearchRandomResponse>(unsplash.domain + \"photos/random\", {\n            query: encodeURIComponent(words),\n            orientation: \"portrait\",\n        }, { \"Authorization\": `Client-ID ${unsplash.apiKey}` }).catch((e) => {\n\n        });\n\n        return res || null;\n    }\n\n    return {\n        error,\n        search,\n        loading,\n    }\n};","import { useCallback, useState } from \"react\";\n\nexport const useFetch = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [error, setError] = useState<Error>();\n\n    const _fetch = useCallback(async<T>(url: string, method: string, data: Object | null = null, header: { [key: string]: string }) => {\n        const abortController = new AbortController(); // cleanupでabortするため\n        const timeout = setTimeout(() => { abortController.abort() }, 10000);\n\n        setError(undefined);\n        setLoading(true);\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    ...header,\n                    'Content-Type': 'application/json',\n                },\n                mode: 'cors',\n                method: method,\n                signal: abortController.signal,\n                body: method === \"POST\" ? JSON.stringify(data) : null,\n            });\n            setLoading(false);\n\n            if (!response.ok) {\n                const err = new Error(`Fetch failed: ${response.statusText}`);\n                setError(err);\n                return Promise.reject(err);\n            }\n\n            return await response.json() as T;\n        } catch (e) {\n            setLoading(false);\n            setError(e);\n            return Promise.reject(new Error(`Fetch failed: ${e}`));\n        } finally {\n            clearTimeout(timeout);\n        }\n    }, []);\n\n    const makeUrlParameter = (data: { [key: string]: number | string }) => {\n        if (!data) return \"\";\n        return \"?\" + Object.keys(data).map((k) => k + \"=\" + data[k].toString()).join(\"&\");\n    }\n\n    const get = useCallback(<Res>(url: string, data: { [key: string]: number | string } = {}, header: { [key: string]: string } = {}) => _fetch<Res>(url + makeUrlParameter(data), \"GET\", null, header), [_fetch]);\n    const post = useCallback(<Req, Res>(url: string, data: Req, header: { [key: string]: string } = {}) => _fetch<Res>(url, \"POST\", data, header), [_fetch]);\n\n    return {\n        loading,\n        error,\n        get,\n        post\n    };\n}","import React from \"react\";\n\ntype Props = {\n    word: string;\n    changeInput: (word: string) => void;\n}\n\nexport const SearchInput: React.FC<Props> = (props: Props) => (\n    <input className=\"search-input\" data-testid=\"search-input\" placeholder=\"please search image word\" value={props.word} onChange={(e) => props.changeInput(e.target.value)} />\n);\n","export const favoriteRule = {\n    title: {\n        required: \"title is required\",\n        minLength: {\n            value: 2,\n            message: \"Please title enter at least 2 characters\",\n        },\n        maxLength: {\n            value: 30,\n            message: \"Please title enter within 30 characters\",\n        }\n    },\n    description: {\n        required: \"description is required\",\n        minLength: {\n            value: 2,\n            message: \"Please enter at least 2 characters\",\n        },\n        maxLength: {\n            value: 128,\n            message: \"Please enter within 128 characters\",\n        }\n    }\n}","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { favoriteRule } from \"app/src/configs/validator\";\n\ntype Props = {\n    onSubmit: (data: App.FavoriteInputData) => void;\n};\n\nexport const FavoriteAddForm: React.FC<Props> = (props: Props) => {\n    const { register, handleSubmit, errors } = useForm<App.FavoriteInputData>();\n\n    return (\n        <form onSubmit={handleSubmit(props.onSubmit)}>\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" name=\"title\" ref={register(favoriteRule.title)} />\n            {errors.title && <span role=\"alert\" className=\"error\">{errors.title.message}</span>}\n            <label htmlFor=\"description\">Description</label>\n            <input type=\"text\" name=\"description\" ref={register(favoriteRule.description)} />\n            {errors.description && <span role=\"alert\" className=\"error\">{errors.description.message}</span>}\n            <input type=\"submit\" value=\"Add\" />\n        </form>\n    );\n};","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\ntype Props = {\n    favorites: App.FavoriteCollection;\n    onSubmit: (data: App.FavoriteChoiceData) => void;\n};\n\nexport const FavoriteChoiceForm: React.FC<Props> = (props: Props) => {\n    const { register, handleSubmit } = useForm<App.FavoriteChoiceData>();\n\n    return (\n        <form onSubmit={handleSubmit(props.onSubmit)}>\n            <select name=\"favoriteId\" ref={register}>\n                {props.favorites.map((favorite, idx) => <option key={idx} value={favorite.id}>{favorite.title}</option>)}\n            </select>\n            <input type=\"submit\" value=\"Add\" />\n        </form>\n    );\n};","import React from \"react\";\nimport Modal from \"react-modal\";\nimport { FavoriteAddForm } from \"app/src/pages/Search/FavoriteAddForm\";\nimport { FavoriteChoiceForm } from \"app/src/pages/Search/FavoriteChoiceForm\";\n\n\ntype Props = {\n    isOpen: boolean;\n    closeModal: () => void;\n    addFavorite: (favorite: App.Favorite) => void;\n    favorites: App.FavoriteCollection;\n}\n\nexport const FavoriteConfirmModal = (props: Props) => {\n    const onAddSubmit = (data: App.FavoriteInputData) => {\n        const favorite = {\n            ...data,\n            photos: [],\n        };\n\n        props.addFavorite(favorite);\n    };\n\n    const onChoiceSubmit = (data: App.FavoriteChoiceData) => {\n        const item = props.favorites.find((f) => f.id === data.favoriteId);\n        if (!item) return;\n        props.addFavorite(item);\n    }\n\n    return (\n        <Modal\n            className=\"modal\"\n            overlayClassName=\"modal-overlay\"\n            isOpen={props.isOpen}\n            onRequestClose={props.closeModal}\n        >\n            <div className=\"favorite-confirm-modal-content\">\n                <div className=\"favorite-confirm-modal-content__list\">\n                    <h3>List</h3>\n                    <FavoriteChoiceForm favorites={props.favorites} onSubmit={onChoiceSubmit} />\n                </div>\n                <div className=\"favorite-confirm-modal-content__new-list\">\n                    <h3>New List</h3>\n                    <FavoriteAddForm onSubmit={onAddSubmit} />\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\n\n","import clonedeep from \"lodash.clonedeep\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { favoritesState } from \"app/src/atoms/favorites\";\nimport { useRecoilState } from \"recoil\";\n\nexport const useFavorite = () => {\n    const [favorites, setFavorites] = useRecoilState(favoritesState);\n\n    const addFavorite = (favorite: App.Favorite, photo: Unsplash.Photo) => {\n        const state = clonedeep(favorites);\n        const idx = state.findIndex((e) => e.id === favorite.id);\n        if (idx < 0) {\n            favorite.id = uuidv4();\n            favorite.photos = [photo];\n            state.push(favorite);\n        }\n        else {\n            state[idx].photos.push(photo);\n        }\n        setFavorites(state);\n    };\n\n    const updateFavorite = (favorite: App.Favorite) => {\n        const state = clonedeep(favorites);\n        const idx = state.findIndex((e) => e.id === favorite.id);\n        if (idx < 0) return;\n        state[idx] = favorite;\n        setFavorites(state);\n    };\n\n    return {\n        favorites,\n        addFavorite,\n        updateFavorite\n    };\n};","import React from \"react\";\n\ntype Props = {\n    user: Unsplash.User;\n    className?: string;\n}\n\nexport const UserInfo = React.memo((props: Props) => (\n    <div className={props.className ? `user-info ${props.className}` : \"user-info\"}>\n        <a href={props.user.links.html} target=\"_blank\" rel=\"noopener noreferrer\"><img src={props.user.profile_image.small} alt={props.user.username} />{props.user.username}</a>\n    </div>\n));","export const download = (url: string, name: string) => {\n    const elm = document.createElement(\"a\");\n    const file = new Blob(\n        [url],\n        { type: \"image/*\" }\n    );\n    elm.href = URL.createObjectURL(file);\n    elm.download = name;\n    elm.click();\n};","import React, { useCallback } from \"react\";\nimport { FavoriteConfirmModal } from 'app/src/pages/Search/FavoriteConfirmModal';\nimport { useModal } from \"app/src/hooks/modal\";\nimport { useFavorite } from \"app/src/hooks/favorite\";\nimport { UserInfo } from \"app/src/components/UserInfo\";\nimport { download } from \"app/src/utils\";\n\ntype Props = {\n    photo: Unsplash.Photo;\n}\n\nexport const SearchResult = (props: Props) => {\n    const { isOpen, closeModal, openModal } = useModal();\n    const { favorites, addFavorite } = useFavorite();\n\n    const onDownload = useCallback(() => {\n        download(props.photo.urls.regular, `${props.photo.id}.jpg`);\n    }, [props.photo.urls.regular, props.photo.id]);\n\n    const onAddFavorite = useCallback((favorite: App.Favorite) => {\n        addFavorite(favorite, props.photo);\n        closeModal();\n    }, [addFavorite, closeModal, props.photo]);\n\n    return (\n        <div\n            className=\"search-result\"\n            style={{\n                backgroundImage: `url(${props.photo.urls.small})`,\n                width: 400,\n                height: props.photo.height * 400 / props.photo.width\n            }}>\n            <div className=\"search-result-controll\">\n                <button onClick={onDownload}>download</button>\n                <button onClick={openModal}>save</button>\n            </div>\n            <UserInfo user={props.photo.user} />\n            <FavoriteConfirmModal\n                favorites={favorites}\n                addFavorite={onAddFavorite}\n                isOpen={isOpen}\n                closeModal={closeModal}\n            />\n        </div >\n    );\n}\n\n","import { useCallback, useState } from \"react\";\n\nexport const useModal = () => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n\n    const openModal = useCallback(() => {\n        setIsOpen(true);\n    }, []);\n\n    const closeModal = useCallback(() => {\n        setIsOpen(false);\n    }, []);\n\n    return {\n        isOpen,\n        openModal,\n        closeModal\n    }\n};","import React from 'react';\n\nimport { Indicator } from 'app/src/components/Indicator';\nimport { useSearch } from \"app/src/hooks/search\";\nimport { SearchInput } from \"app/src/pages/Search/SearchInput\";\nimport { SearchResult } from \"app/src/pages/Search/SearchResult\";\n\nexport default () => {\n    const { loading, word, setWord, searchResult, error } = useSearch();\n    return (\n        <div className=\"search-page\">\n            <form>\n                <SearchInput word={word} changeInput={setWord} />\n            </form>\n            {error && <p role=\"alert\" className=\"error\">{error.message}</p>}\n            {searchResult ? <SearchResult photo={searchResult} /> : loading && <Indicator size={100} />}\n        </div>\n    );\n};","import { useObservable } from \"rxjs-hooks\";\nimport { map, filter, debounceTime, distinctUntilChanged, switchMap } from \"rxjs/operators\";\nimport { useState } from \"react\";\nimport { useUnsplash } from \"./unsplash\";\n\nexport const useSearch = (initialWord: string = \"\") => {\n    const { loading, search, error } = useUnsplash();\n    const [word, setWord] = useState<string>(initialWord);\n\n    const searchResult = useObservable<Unsplash.Photo | null, string[]>((_, word$) => word$.pipe(\n        debounceTime(500),\n        distinctUntilChanged(),\n        filter((word) => word[0]?.length > 1),\n        switchMap((word) => search(word[0])),\n        map((result) => result)\n    ), null, [word]);\n\n    return {\n        error,\n        loading,\n        word,\n        setWord,\n        searchResult\n    };\n};","import React, { useRef, useState, useEffect, useCallback } from \"react\";\n\ntype Props = {\n    src: string;\n    alt?: string;\n} & React.DOMAttributes<HTMLImageElement>;\n\nexport const LazyImage = React.memo((props: Props) => {\n    const imageRef = useRef<HTMLImageElement>(null);\n    const [imageLoaded, setImageLoaded] = useState(false);\n\n    const startLoading = useCallback((entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {\n        entries.forEach((entry) => {\n            if (!entry.isIntersecting) return;\n\n            if (entry.intersectionRatio > 0) {\n                observer.unobserve(entry.target)\n            }\n\n            if (!imageLoaded) {\n                const downloadingImage = new Image()\n                downloadingImage.onload = () => {\n                    if (imageRef.current) {\n                        imageRef.current.setAttribute('src', downloadingImage.src)\n                        setImageLoaded(true)\n                    }\n                }\n\n                downloadingImage.src = props.src;\n                observer.unobserve(entry.target);\n            }\n\n            observer.unobserve(entry.target);\n        })\n    }, [imageLoaded, props.src]);\n\n    useEffect(() => {\n        if (!imageRef.current) return;\n        const observer = new IntersectionObserver(startLoading, { rootMargin: '50px' })\n        if (!imageLoaded) {\n            observer.observe(imageRef.current)\n        }\n        return () => {\n            if (imageRef.current) observer.unobserve(imageRef.current);\n        }\n    }, [imageLoaded, startLoading]);\n\n    return (\n        <img\n            {...props}\n            src={props.src}\n            alt={props.alt}\n            ref={imageRef}\n        />\n    )\n});","import React from \"react\";\nimport { LazyImage } from \"./LazyImage\";\n\ntype Props = {\n    data: Unsplash.Photo;\n    onDownload: (data: Unsplash.Photo) => void;\n}\n\nexport const FavoriteItem = React.memo((props: Props) => {\n    return (\n        <div className=\"favorite-item\">\n            <div className=\"favorite-item__img-wrapper\">\n                <div className=\"favorite-item__img-wrapper__controll\"><button onClick={() => props.onDownload(props.data)}>download</button></div>\n                <LazyImage src={props.data.urls.thumb} />\n            </div>\n        </div>\n    );\n});","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { favoriteRule } from \"app/src/configs/validator\";\n\ntype Props = {\n    favorite: App.Favorite;\n    onSubmit: (data: App.FavoriteInputData) => void;\n};\n\nexport const FavoriteEditInfoForm: React.FC<Props> = React.memo((props: Props) => {\n    const { register, handleSubmit } = useForm<App.FavoriteInputData>();\n\n    return (\n        <div className=\"favorite-edit-info-form\">\n            <form onSubmit={handleSubmit(props.onSubmit)}>\n                <input type=\"text\" name=\"title\" defaultValue={props.favorite.title} ref={register(favoriteRule.title)} />\n                <input type=\"text\" name=\"description\" defaultValue={props.favorite.description} ref={register(favoriteRule.description)} />\n                <input type=\"submit\" value=\"Save\" />\n            </form>\n        </div>\n    );\n});","import React, { useCallback } from \"react\";\nimport { FavoriteItem } from \"app/src/components/FavoriteItem\";\nimport { FavoriteEditInfoForm } from \"app/src/pages/Favorites/FavoriteEditInfoForm\";\nimport { useToggle } from \"app/src/hooks/toggle\";\n\ntype Props = {\n    data: App.Favorite;\n    onDownload: (data: Unsplash.Photo) => void;\n    onSubmit: (data: App.Favorite) => void;\n}\n\nexport const FavoriteCollection = React.memo((props: Props) => {\n    const { isOpen: editable, toggle } = useToggle();\n\n    const onSubmit = useCallback((data: App.FavoriteInputData) => {\n        props.onSubmit({\n            ...props.data,\n            ...data\n        });\n        toggle();\n    }, [props, toggle]);\n\n    return (\n        <div className=\"favorite-collection\">\n            <div className=\"favorite-collection__info-wrapper\">\n                <div className=\"favorite-collection__info-wrapper__contents\">\n                    {\n                        editable ?\n                            <FavoriteEditInfoForm favorite={props.data} onSubmit={onSubmit} /> :\n                            (<>\n                                <h4 className=\"favorite-collection__info-wrapper__contents__title\">{props.data.title}</h4>\n                                <p className=\"favorite-collection__info-wrapper__contents__description\">{props.data.description}</p>\n                            </>)\n                    }\n                </div>\n                <div className=\"favorite-collection__info-wrapper__controll\">\n                    <button onClick={toggle}>{editable ? \"Cancel\" : \"Edit\"}</button>\n                </div>\n            </div>\n            <ul data-testid=\"favorite-collection__list\" className=\"favorite-collection__list-wrapper\">\n                {props.data.photos.map((photo, idx) => (\n                    <li className=\"favorite-collection__list-wrapper__list-item\" key={idx}><FavoriteItem data={photo} onDownload={props.onDownload} /></li>\n                ))}\n            </ul>\n        </div >\n    );\n});","import { useCallback, useState } from \"react\";\n\nexport const useToggle = (initialize: boolean = false) => {\n    const [isOpen, setIsOpen] = useState<boolean>(initialize);\n\n    const toggle = useCallback(() => {\n        setIsOpen(!isOpen);\n    }, [isOpen]);\n\n    return {\n        isOpen,\n        toggle,\n    }\n};","import React, { useCallback } from \"react\";\nimport { FavoriteCollection } from \"app/src/pages/Favorites/FavoriteCollection\";\nimport { useFavorite } from \"app/src/hooks/favorite\";\nimport { download } from \"app/src/utils\";\n\nexport default () => {\n    const { favorites, updateFavorite } = useFavorite();\n\n    const onDownload = useCallback((data: Unsplash.Photo) => {\n        download(data.urls.regular, `${data.id}.jpg`);\n    }, []);\n\n    const onSubmit = useCallback((data: App.Favorite) => {\n        updateFavorite(data);\n    }, [updateFavorite]);\n\n    return (\n        <div className=\"favorites-page\">\n            <ul>\n                {favorites.map((item, idx) => (\n                    <li key={idx}>\n                        <FavoriteCollection data={item} onDownload={onDownload} onSubmit={onSubmit} />\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Search from \"app/src/pages/Search\";\nimport Favorites from \"app/src/pages/Favorites\";\n\nexport default () => (\n    <Switch>\n        <Route path=\"/search\" component={Search} />\n        <Route path=\"/favorites\" component={Favorites} />\n        <Redirect exact from=\"/\" to=\"/search\" />\n        <Route render={() => <p>Not Found!</p>} />\n    </Switch>\n);","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nconst MainLayout: React.FC<{}> = React.memo((props) => (\n    <>\n        <header className=\"header\">\n            <div className=\"header__wrapper\">\n                <ul className=\"header__wrapper__nav\">\n                    <li><Link to=\"/search\">Search</Link></li>\n                    <li><Link to=\"/favorites\">Favorites</Link></li>\n                </ul>\n            </div>\n        </header>\n        <main className=\"main\">\n            {props.children}\n        </main>\n    </>\n));\n\nexport default MainLayout;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { RecoilRoot } from \"recoil\";\nimport { PersistenceObserver, initializeState } from \"app/src/atoms/persistence\";\nimport Routes from \"app/src/Routes\";\nimport MainLayout from \"app/src/pages/MainLayout\";\nimport Modal from \"react-modal\";\n\nfunction App() {\n  Modal.setAppElement('#root');\n\n  return (\n    <RecoilRoot initializeState={initializeState}>\n      <PersistenceObserver />\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <MainLayout>\n          <Routes />\n        </MainLayout>\n      </BrowserRouter>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-app-polyfill/ie11';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}